exports.listAllFiles = async (req, res) => {
  console.log(req.user._id);
  const userId = req.user._id;
  const user = await User.findById(userId);

  if (!user) {
    return res.status(404).json({ message: "User not found" });
  }

  const bucketName = user.email;

  console.log(bucketName);
  const url = `http://localhost:8002/list-all-files/${bucketName}`;

  try {
    const response = await axios.get(url);
    res.json(response.data);
  } catch (error) {
    console.error("Failed to list files:", error);
    res.status(500).json({ message: "Failed to list files" });
  }
};




app.get("/list-all-files/:bucketName", (req, res) => {
  try {
    const bucketDir = path.join(rootBucketDir, req.params.bucketName);
    if (!fs.existsSync(bucketDir)) {
      return res.status(404).json({ message: "Bucket not found" });
    }

    const files = fs.readdirSync(bucketDir);
    let totalBucketSize = 0; // Initialize the total bucket size to zero

    // Creating a new array to store files with their size
    const fileDetails = files.map((file) => {
      const filePath = path.join(bucketDir, file);
      const stats = fs.statSync(filePath);
      totalBucketSize += stats.size; // Add the size of each file to the total bucket size
      return {
        url: `http://localhost:${portmain}/api/download/${req.params.bucketName}/${file}`,
        size: bytesToSize(stats.size), // Adding the file size here
        modifiedDate: stats.mtime.toISOString(), // Adding the last modified date here
        fileName: file,
      };
    });

    res.json({
      files: fileDetails,
      totalBucketSize: bytesToSize(totalBucketSize), // Send the total bucket size as well
    });
  } catch (error) {
    console.error("Error fetching all files from bucket:", error);
    res
      .status(500)
      .send("An error occurred while fetching files from the bucket.");
  }
});
